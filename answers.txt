Сохранение объектов в бд

1.3.1
es1 = EmergencyService(title="Полиция", service_code='02', phone='02')
es1.save()
es2 = EmergencyService(title="Скорая помощь", service_code='03', phone='03')
es2.save()
EmergencyService.objects.create(title="Пожарная", service_code='01', phone='01')

Applicant.objects.create(full_name='Иванов Иван Иванович', birthday=datetime.date(2002, 8, 26), gender='M')
apl = Applicant(full_name='Дмитриев Дмитрий Дмитриевич', birthday=datetime.date(1995, 1, 26), gender='М', health_status='Полностью здоров', phone=88005553535)
apl.save()

Appeal.objects.create(applicant_id=1, number=1, status='В работе', victims_number=1, do_not_call=True)
appeal = Appeal(applicant=apl, do_not_call=False, status='Завершено', victims_number=123, number=2)
appeal.save()

1.3.2

a = Applicant.objects.get(id=1)
e = a.applicants.create(do_not_call=False, status='Завершено', victims_number=123, number=3)

1.3.3

es1 = EmergencyService.objects.get(id=1)
es2 = EmergencyService.objects.get(id=2)
es3 = EmergencyService.objects.get(id=3)
appeal = Appeal.objects.get(id=1)
appeal.emergency_services.add(es1)

appeal = Appeal.objects.get(id=2)
appeal.emergency_services.set([es1,es2,es3])



Запросы к бд
1
Applicant.objects.get(id=1)
Applicant.objects.get(id__exact=1)
Applicant.objects.get(pk=1)

2
a = Applicant.objects.get(id=1)
Appeal.objects.filter(applicant=a)
a.applicants.all()

3
EmergencyService.objects.all()[:3]

4
Applicant.objects.all().order_by('-id')[:5]

5
Appeal.objects.earliest('date')
Appeal.objects.latest('date')

Appeal.objects.order_by('date').first()
Appeal.objects.order_by('date').last()

6
Appeal.objects.all()[1::2]

7 - 2 запроса
reset_queries()
len(connection.queries)
0
for i in a.iterator():
    print(i)
...
1
2
3
len(connection.queries)
1
for i in a.iterator():
    print(i)
...
1
2
3
len(connection.queries)
2

8
Appeal.objects.count()

9
Appeal.objects.order_by('?').first()



Фильтрация
from core.models import *
import datetime
from utildate.relativedelta import relativedelta
from django.db import connection, reset_queries
from django.db.models import Count

1
Appeal.objects.filter(applicant_id=1)  # .first если одно

2
Applicant.objects.filter(gender='М', applicants__isnull=True)

3
Applicant.objects.all().order_by('id')

4
Applicant.objects.filter(birthday__gt=(datetime.date.today() - relativedelta(years=18)))

5
Applicant.objects.filter(birthday__lt=(datetime.date.today() - relativedelta(years=18)))

6
>>> try:
...     Applicant.objects.all()[0]
... except Exception:
...     print("empty")

Applicant.objects.exists()

7
Applicant.objects.filter(full_name__contains='алекс')

8
Appeal.objects.exclude(emergency_services__isnull=True)

9
Appeal.objects.filter(emergency_services__service_code='03').values('date').earliest('date')

10
Appeal.objects.filter(date__lt=datetime.date.today())

11
Applicant.objects.filter(phone__isnull=True, image__isnull=True)  # Либо если image не может быть null - Applicant.objects.filter(phone__isnull=True, image="")
Applicant.objects.filter(Q(phone__isnull=True) | Q(image__isnull=True))

12
Applicant.objects.filter(phone__startswith='917')

13
qs1.union(qs2)
qs1.difference(qs2)
qs1.intersection(qs2)

14
>>> start = datetime.date.today() - relativedelta(years=18)
>>> end = datetime.date.today()
>>> Appeal.objects.filter(date__range=(start, end))

15
Applicant.objects.filter(phone__isnull=True).count()  # Либо phone=""

16
Applicant.objects.distinct()

17
Appeal.objects.filter(status__isnull=False)  # ~status=""

18
Applicant.objects.all().values('phone')

19
Applicant.objects.all().defer('health_status')

20
EmergencyService.objects.raw("SELECT * FROM core_emergencyservice")

21
Applicant.objects.get_or_create(phone=12341234, defaults={"birthday": datetime.date(1940, 10, 9)})

22
Applicant.objects.update_or_create(phone=12341234, defaults={"phone": 1234})

23
objs = Applicant.objects.bulk_create(
    [
        Applicant(full_name="Максимов Максим Максимович", birthday=datetime.date(1976, 10, 9), gender='М', phone=123456),
        Applicant(full_name="Романов Роман Романович", birthday=datetime.date(2001, 10, 9), gender='М', phone=87654),
    ]
)

24
objs = Applicant.objects.bulk_update(
    [
        Applicant(full_name="Максимов Максим Максимович", birthday=datetime.date(1976, 10, 9), gender='М', phone=123456),
        Applicant(full_name="Романов Роман Романович", birthday=datetime.date(2001, 10, 9), gender='М', phone=87654),
    ]
)

25
applicants = Applicant.objects.filter(id__in=[5,6])
applicants = list(applicants)
applicants
[<Applicant: Максимов Максим Максимович>, <Applicant: Романов Роман Романович>]
for applicant in applicants:
    applicant.health_status = 'Полностью здоров'

Applicant.objects.bulk_update(applicants, ['health_status'])

26 - не знаю как по-другому
apls = list(Appeal.objects.all().prefetch_related('emergency_services').values('id', 'emergency_services'))

amounts = {}

for apl in apls:
    if apl['emergency_services'] is None:
        continue

    if apl['id'] in amounts:
        amounts[apl['id']].append(apl['emergency_services'])
    else:
        amounts[apl['id']] = [apl['emergency_services']]

for key in amounts:
    print(f'{key}: {amounts[key]}')

27
list(Appeal.objects.all().values_list('date', flat=True))

28
Appeal.objects.none()

29
from django.db.models import Avg
Appeal.objects.aggregate(Avg('victims_number'))

30
from django.db.models import Sum
Appeal.objects.aggregate(Sum('victims_number'))

31
>>> a = Appeal.objects.annotate(Count('emergency_services'))
>>> appeals = Appeal.objects.annotate(Count('emergency_services'))
>>> for a in appeals:
...     print(f'На {a.id} обращение приехало {a.emergency_services__count} служб')

32
Appeal.objects.aggregate(Avg('emergency_services'))

33
from django.db.models import Max, Min
Appeal.objects.aggregate(Max('victims_number'))
Appeal.objects.aggregate(Min('victims_number'))

34
apl = Applicant.objects.annotate(amount = Count('applicants'))
for a in apl:
    print(f'{a.full_name} - {a.amount}')

Дополнительно:
1
Appeal.objects.filter(emergency_services__isnull=True).update(status='Завершено')

2
Applicant.objects.filter(phone__isnull=True).delete()
